{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\bobzirolluuesti\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Routes, Route, HashRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport Lemmikud from './Lemmikud';\nimport reportWebVitals from './reportWebVitals';\nimport People from './People';\nimport React, { useState } from 'react';\nimport Folders from './Folders';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppWithPeople = () => {\n  _s();\n  const [people, setPeople] = useState(People);\n  const [isLiked, setIsLiked] = useState([]);\n  const [LikeButtonColor, setLikeButtonColor] = useState(true);\n  const [folders, setFolders] = useState([]);\n  const [buttonColor, setButtonColor] = useState(false);\n  const toggleLike = id => {\n    setPeople(prevPeople => {\n      const updatedPeople = prevPeople.map(person => person.id === id ? {\n        ...person,\n        like: !person.like\n      } : person);\n      // Update the isLiked state array based on the updated people array\n      const likedIds = updatedPeople.filter(person => person.like);\n      setIsLiked(likedIds);\n      setLikeButtonColor(prev => !prev);\n      return updatedPeople;\n    });\n  };\n  const removeFromFavorites = id => {\n    setPeople(prevPeople => prevPeople.map(person => person.id === id ? {\n      ...person,\n      like: !person.like\n    } : person));\n    setIsLiked(prev => prev.filter(item => item.id !== id));\n  };\n  const addToFolder = (folderId, personId) => {\n    const selectedFolder = folders.find(folder => folder.id === folderId);\n    const selectedPerson = people.find(person => person.id === personId);\n    const newItem = {\n      id: selectedPerson.id,\n      phone: selectedPerson.phone,\n      img: selectedPerson.picture\n    };\n    // kontrollib kas item on juba folderis\n    const alreadyIncluded = selectedFolder.image.some(item => item.id === newItem.id);\n    // kui on siis..\n    if (alreadyIncluded) {\n      const updatedImage = selectedFolder.image.filter(item => item.id !== newItem.id); // uus image array mis ei sisalda itemit idega newItem.id\n      const updatedFolder = {\n        ...selectedFolder,\n        image: updatedImage\n      }; //updatime folderi selle uue image arrayga, seega see on kustutatud sealt\n      const updatedFolders = folders.map(folder => folder.id === folderId ? updatedFolder : folder); // updatime foldersi array uue muudetud folderiga\n      setFolders(updatedFolders);\n    } else {\n      // kui ei ole folderis siis..\n      const updatedFolder = {\n        ...selectedFolder,\n        image: [...selectedFolder.image, newItem]\n      };\n      const updatedFolders = folders.map(folder => folder.id === folderId ? updatedFolder : folder);\n      setFolders(updatedFolders);\n    }\n    /* const img = picture instanceof File ? URL.createObjectURL(picture) : picture;\n    const folderToUpdate = folders.find(folder => folder.id === folderId); */\n  };\n  return /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: /*#__PURE__*/_jsxDEV(HashRouter, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(App, {\n            people: people,\n            setPeople: setPeople,\n            isLiked: isLiked,\n            setIsLiked: setIsLiked,\n            toggleLike: toggleLike,\n            LikeButtonColor: LikeButtonColor,\n            setLikeButtonColor: setLikeButtonColor,\n            folders: folders,\n            setFolders: setFolders,\n            addToFolder: addToFolder,\n            buttonColor: buttonColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/Lemmikud\",\n          element: /*#__PURE__*/_jsxDEV(Lemmikud, {\n            people: people,\n            setPeople: setPeople,\n            isLiked: isLiked,\n            removeFromFavorites: removeFromFavorites\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/Folders\",\n          element: /*#__PURE__*/_jsxDEV(Folders, {\n            folders: folders,\n            setFolders: setFolders\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(AppWithPeople, \"YS+/534/iYRhrSD+kRn+n2mjHas=\");\n_c = AppWithPeople;\nReactDOM.render( /*#__PURE__*/_jsxDEV(AppWithPeople, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 93,\n  columnNumber: 3\n}, this), document.getElementById('root'));\nreportWebVitals();\nvar _c;\n$RefreshReg$(_c, \"AppWithPeople\");","map":{"version":3,"names":["ReactDOM","BrowserRouter","Router","Routes","Route","HashRouter","App","Lemmikud","reportWebVitals","People","React","useState","Folders","jsxDEV","_jsxDEV","AppWithPeople","_s","people","setPeople","isLiked","setIsLiked","LikeButtonColor","setLikeButtonColor","folders","setFolders","buttonColor","setButtonColor","toggleLike","id","prevPeople","updatedPeople","map","person","like","likedIds","filter","prev","removeFromFavorites","item","addToFolder","folderId","personId","selectedFolder","find","folder","selectedPerson","newItem","phone","img","picture","alreadyIncluded","image","some","updatedImage","updatedFolder","updatedFolders","StrictMode","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","render","document","getElementById","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/bobzirolluuesti/src/index.js"],"sourcesContent":["\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Routes, Route, HashRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport Lemmikud from './Lemmikud';\nimport reportWebVitals from './reportWebVitals';\nimport People from './People';\nimport React, { useState } from 'react';\nimport Folders from './Folders';\n\n\nconst AppWithPeople = () => {\n  const [people, setPeople] = useState(People);\n  const [isLiked, setIsLiked] = useState([]);\n  const [LikeButtonColor, setLikeButtonColor] = useState(true)\n  const [folders, setFolders] = useState([])\n\n  const [buttonColor, setButtonColor] = useState(false)\n\n  const toggleLike = (id) => {\n    setPeople(prevPeople => {\n      const updatedPeople = prevPeople.map(person =>\n        person.id === id ? { ...person, like: !person.like } : person\n      );\n      // Update the isLiked state array based on the updated people array\n      const likedIds = updatedPeople.filter(person => person.like)\n      setIsLiked(likedIds);\n      setLikeButtonColor(prev => !prev)\n\n      return updatedPeople;\n    });\n  };\n\n  const removeFromFavorites = (id) => {\n    setPeople(prevPeople => (\n      prevPeople.map(person => (\n        person.id === id ? { ...person, like: !person.like } : person\n      ))\n    ))\n    setIsLiked(prev => prev.filter(item => item.id !== id)\n    )\n  }\n\n  const addToFolder = (folderId, personId) => {\n    const selectedFolder = folders.find(folder => folder.id === folderId);\n    const selectedPerson = people.find(person => person.id === personId);\n    const newItem = {\n      id: selectedPerson.id,\n      phone: selectedPerson.phone,\n      img: selectedPerson.picture,\n    };\n    // kontrollib kas item on juba folderis\n    const alreadyIncluded = selectedFolder.image.some(item => item.id === newItem.id);\n    // kui on siis..\n    if (alreadyIncluded) {\n      const updatedImage = selectedFolder.image.filter(item => item.id !== newItem.id);// uus image array mis ei sisalda itemit idega newItem.id\n      const updatedFolder = { ...selectedFolder, image: updatedImage }; //updatime folderi selle uue image arrayga, seega see on kustutatud sealt\n      const updatedFolders = folders.map(folder => folder.id === folderId ? updatedFolder : folder);// updatime foldersi array uue muudetud folderiga\n      setFolders(updatedFolders);\n    } else {\n      // kui ei ole folderis siis..\n      const updatedFolder = { ...selectedFolder, image: [...selectedFolder.image, newItem] };\n      const updatedFolders = folders.map(folder => folder.id === folderId ? updatedFolder : folder);\n      setFolders(updatedFolders);\n    }\n    /* const img = picture instanceof File ? URL.createObjectURL(picture) : picture;\n    const folderToUpdate = folders.find(folder => folder.id === folderId); */\n  }\n  return (\n    <React.StrictMode>\n      <HashRouter>\n        <Routes>\n          <Route path=\"/\" element={<App people={people} setPeople={setPeople} isLiked={isLiked}\n            setIsLiked={setIsLiked} toggleLike={toggleLike} LikeButtonColor={LikeButtonColor}\n            setLikeButtonColor={setLikeButtonColor} folders={folders} setFolders={setFolders} addToFolder={addToFolder}\n            buttonColor={buttonColor} />} />\n\n          <Route path=\"/Lemmikud\" element={<Lemmikud people={people} setPeople={setPeople}\n            isLiked={isLiked} removeFromFavorites={removeFromFavorites} />} />\n\n          <Route path=\"/Folders\" element={<Folders\n            folders={folders} setFolders={setFolders}\n          />} />\n        </Routes>\n      </HashRouter>\n    </React.StrictMode>\n  );\n}\n\nReactDOM.render(\n  <AppWithPeople />,\n  document.getElementById('root')\n);\n\nreportWebVitals()"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}