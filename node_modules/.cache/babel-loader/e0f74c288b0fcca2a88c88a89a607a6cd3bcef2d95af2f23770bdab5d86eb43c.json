{"ast":null,"code":"import ReactDOM from'react-dom';import{BrowserRouter as Router,Routes,Route,HashRouter}from'react-router-dom';import'bootstrap/dist/css/bootstrap.min.css';import'./index.css';import App from'./App';import Lemmikud from'./Lemmikud';import reportWebVitals from'./reportWebVitals';import People from'./People';import React,{useState}from'react';import Folders from'./Folders';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const AppWithPeople=()=>{const[people,setPeople]=useState(People);const[isLiked,setIsLiked]=useState([]);const[LikeButtonColor,setLikeButtonColor]=useState(true);const[folders,setFolders]=useState([]);const[buttonColor,setButtonColor]=useState(false);const toggleLike=id=>{setPeople(prevPeople=>{const updatedPeople=prevPeople.map(person=>person.id===id?{...person,like:!person.like}:person);setIsLiked(updatedPeople.filter(person=>person.like));setLikeButtonColor(prev=>!prev);return updatedPeople;});};const removeFromFavorites=id=>{setPeople(prevPeople=>prevPeople.map(person=>person.id===id?{...person,like:!person.like}:person));setIsLiked(prev=>prev.filter(item=>item.id!==id));};const addToFolder=(folderId,personId)=>{const selectedFolder=folders.find(folder=>folder.id===folderId);const selectedPerson=people.find(person=>person.id===personId);const newItem={id:selectedPerson.id,phone:selectedPerson.phone,img:selectedPerson.picture,active:false};const alreadyIncluded=selectedFolder.image.some(item=>item.id===newItem.id);const updatedImageArray=alreadyIncluded?selectedFolder.image.filter(item=>item.id!==selectedPerson.id):[...selectedFolder.image,newItem];const updatedFolder={...selectedFolder,image:updatedImageArray};const updatedFolders=folders.map(folder=>folder.id===folderId?updatedFolder:folder);setFolders(updatedFolders);setButtonColor(!buttonColor);console.log(folders);};return/*#__PURE__*/_jsx(React.StrictMode,{children:/*#__PURE__*/_jsx(HashRouter,{children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(App,{people:people,setPeople:setPeople,isLiked:isLiked,setIsLiked:setIsLiked,toggleLike:toggleLike,LikeButtonColor:LikeButtonColor,setLikeButtonColor:setLikeButtonColor,folders:folders,setFolders:setFolders,addToFolder:addToFolder,buttonColor:buttonColor})}),/*#__PURE__*/_jsx(Route,{path:\"/Folders\",element:/*#__PURE__*/_jsx(Folders,{folders:folders,setFolders:setFolders})}),/*#__PURE__*/_jsx(Route,{path:\"/Lemmikud\",element:/*#__PURE__*/_jsx(Lemmikud,{people:people,setPeople:setPeople,isLiked:isLiked,removeFromFavorites:removeFromFavorites})})]})})});};ReactDOM.render(/*#__PURE__*/_jsx(AppWithPeople,{}),document.getElementById('root'));reportWebVitals();","map":{"version":3,"names":["ReactDOM","BrowserRouter","Router","Routes","Route","HashRouter","App","Lemmikud","reportWebVitals","People","React","useState","Folders","jsx","_jsx","jsxs","_jsxs","AppWithPeople","people","setPeople","isLiked","setIsLiked","LikeButtonColor","setLikeButtonColor","folders","setFolders","buttonColor","setButtonColor","toggleLike","id","prevPeople","updatedPeople","map","person","like","filter","prev","removeFromFavorites","item","addToFolder","folderId","personId","selectedFolder","find","folder","selectedPerson","newItem","phone","img","picture","active","alreadyIncluded","image","some","updatedImageArray","updatedFolder","updatedFolders","console","log","StrictMode","children","path","element","render","document","getElementById"],"sources":["C:/Users/Lenovo/Desktop/imageManager/src/index.js"],"sourcesContent":["\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Routes, Route, HashRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport Lemmikud from './Lemmikud';\nimport reportWebVitals from './reportWebVitals';\nimport People from './People';\nimport React, { useState } from 'react';\nimport Folders from './Folders';\n\n\nconst AppWithPeople = () => {\n  const [people, setPeople] = useState(People);\n  const [isLiked, setIsLiked] = useState([]);\n  const [LikeButtonColor, setLikeButtonColor] = useState(true)\n  const [folders, setFolders] = useState([])\n  const [buttonColor, setButtonColor] = useState(false)\n\n  const toggleLike = (id) => {\n    setPeople(prevPeople => {\n      const updatedPeople = prevPeople.map(person =>\n        person.id === id ? { ...person, like: !person.like } : person\n      );\n\n      setIsLiked(updatedPeople.filter(person => person.like))\n      setLikeButtonColor(prev => !prev)\n\n      return updatedPeople;\n    });\n  };\n\n  const removeFromFavorites = (id) => {\n    setPeople(prevPeople => (\n      prevPeople.map(person => (\n        person.id === id ? { ...person, like: !person.like } : person\n      ))\n    ))\n    setIsLiked(prev => prev.filter(item => item.id !== id)\n    )\n  }\n\n\n  const addToFolder = (folderId, personId) => {\n    const selectedFolder = folders.find(folder => folder.id === folderId);\n    const selectedPerson = people.find(person => person.id === personId);\n\n    const newItem = {\n      id: selectedPerson.id,\n      phone: selectedPerson.phone,\n      img: selectedPerson.picture,\n      active: false\n    };\n\n    const alreadyIncluded = selectedFolder.image.some(item => item.id === newItem.id);\n\n    const updatedImageArray = alreadyIncluded ? selectedFolder.image.filter(item => item.id !== selectedPerson.id) : [...selectedFolder.image, newItem];\n\n    const updatedFolder = {\n      ...selectedFolder,\n      image: updatedImageArray,\n\n    };\n    const updatedFolders = folders.map(folder => folder.id === folderId ? updatedFolder : folder);\n    setFolders(updatedFolders);\n    setButtonColor(!buttonColor)\n\n    console.log(folders)\n\n  }\n  return (\n    <React.StrictMode>\n      <HashRouter>\n        <Routes>\n          <Route path=\"/\" element={<App people={people} setPeople={setPeople} isLiked={isLiked}\n            setIsLiked={setIsLiked} toggleLike={toggleLike} LikeButtonColor={LikeButtonColor}\n            setLikeButtonColor={setLikeButtonColor} folders={folders} setFolders={setFolders} addToFolder={addToFolder}\n            buttonColor={buttonColor} />} />\n          <Route path=\"/Folders\" element={<Folders folders={folders} setFolders={setFolders} />} />\n          <Route path=\"/Lemmikud\" element={<Lemmikud people={people} setPeople={setPeople}\n            isLiked={isLiked} removeFromFavorites={removeFromFavorites} />} />\n        </Routes>\n      </HashRouter>\n    </React.StrictMode>\n  );\n}\n\nReactDOM.render(\n  <AppWithPeople />,\n  document.getElementById('root')\n);\n\nreportWebVitals()"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}