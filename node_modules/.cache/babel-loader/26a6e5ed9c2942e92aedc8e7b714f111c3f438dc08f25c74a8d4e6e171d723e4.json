{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\bobzirolluuesti\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Routes, Route, HashRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport Lemmikud from './Lemmikud';\nimport reportWebVitals from './reportWebVitals';\nimport People from './People';\nimport React, { useState } from 'react';\nimport Folders from './Folders';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppWithPeople = () => {\n  _s();\n  const [people, setPeople] = useState(People);\n  const [isLiked, setIsLiked] = useState([]);\n  const [LikeButtonColor, setLikeButtonColor] = useState(true);\n  const [folders, setFolders] = useState([]);\n  const toggleLike = id => {\n    setPeople(prevPeople => {\n      const updatedPeople = prevPeople.map(person => person.id === id ? {\n        ...person,\n        like: !person.like\n      } : person);\n      // Update the isLiked state array based on the updated people array\n      const likedIds = updatedPeople.filter(person => person.like);\n      setIsLiked(likedIds);\n      setLikeButtonColor(prev => !prev);\n      return updatedPeople;\n    });\n  };\n  const removeFromFavorites = id => {\n    setPeople(prevPeople => prevPeople.map(person => person.id === id ? {\n      ...person,\n      like: !person.like\n    } : person));\n    setIsLiked(prev => prev.filter(item => item.id !== id));\n  };\n  const addToFolder = (folderId, personId) => {\n    const img = props.picture instanceof File ? URL.createObjectURL(props.picture) : props.picture;\n    const folderToUpdate = props.folders.find(folder => folder.id === folderId);\n\n    // Determine whether to add or remove the item from the folder\n    if (props.AddtofolderToggle) {\n      // Add the item to the folder\n      const updatedFolder = folderToUpdate ? {\n        ...folderToUpdate,\n        image: [...folderToUpdate.image, {\n          id: personId,\n          phone: props.phone,\n          img: img\n        }]\n      } : null;\n      const updatedFolders = props.folders.map(folder => folder.id === folderId ? updatedFolder : folder);\n      props.setFolders(updatedFolders);\n    } else {\n      // Remove the item from the folder\n      const updatedFolders = props.folders.map(folder => ({\n        ...folder,\n        image: folder.image.filter(item => item.id !== personId)\n      }));\n      props.setFolders(updatedFolders);\n    }\n\n    // Toggle the button color\n    setButtonColor(!buttonColor);\n  };\n  console.log(people);\n  return /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: /*#__PURE__*/_jsxDEV(HashRouter, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(App, {\n            people: people,\n            setPeople: setPeople,\n            isLiked: isLiked,\n            setIsLiked: setIsLiked,\n            toggleLike: toggleLike,\n            LikeButtonColor: LikeButtonColor,\n            setLikeButtonColor: setLikeButtonColor,\n            folders: folders,\n            setFolders: setFolders,\n            addToFolder: addToFolder\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/Lemmikud\",\n          element: /*#__PURE__*/_jsxDEV(Lemmikud, {\n            people: people,\n            setPeople: setPeople,\n            isLiked: isLiked,\n            removeFromFavorites: removeFromFavorites\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/Folders\",\n          element: /*#__PURE__*/_jsxDEV(Folders, {\n            people: people,\n            setPeople: setPeople,\n            isLiked: isLiked,\n            removeFromFavorites: removeFromFavorites,\n            folders: folders,\n            setFolders: setFolders\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(AppWithPeople, \"nzE1dJdMCgPtghimbx73a/Nwa70=\");\n_c = AppWithPeople;\nReactDOM.render( /*#__PURE__*/_jsxDEV(AppWithPeople, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 95,\n  columnNumber: 3\n}, this), document.getElementById('root'));\nreportWebVitals();\nvar _c;\n$RefreshReg$(_c, \"AppWithPeople\");","map":{"version":3,"names":["ReactDOM","BrowserRouter","Router","Routes","Route","HashRouter","App","Lemmikud","reportWebVitals","People","React","useState","Folders","jsxDEV","_jsxDEV","AppWithPeople","_s","people","setPeople","isLiked","setIsLiked","LikeButtonColor","setLikeButtonColor","folders","setFolders","toggleLike","id","prevPeople","updatedPeople","map","person","like","likedIds","filter","prev","removeFromFavorites","item","addToFolder","folderId","personId","img","props","picture","File","URL","createObjectURL","folderToUpdate","find","folder","AddtofolderToggle","updatedFolder","image","phone","updatedFolders","setButtonColor","buttonColor","console","log","StrictMode","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","render","document","getElementById","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/bobzirolluuesti/src/index.js"],"sourcesContent":["\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Routes, Route, HashRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport Lemmikud from './Lemmikud';\nimport reportWebVitals from './reportWebVitals';\nimport People from './People';\nimport React, { useState } from 'react';\nimport Folders from './Folders';\n\n\nconst AppWithPeople = () => {\n  const [people, setPeople] = useState(People);\n  const [isLiked, setIsLiked] = useState([]);\n  const [LikeButtonColor, setLikeButtonColor] = useState(true)\n  const [folders, setFolders] = useState([])\n\n  const toggleLike = (id) => {\n    setPeople(prevPeople => {\n      const updatedPeople = prevPeople.map(person =>\n        person.id === id ? { ...person, like: !person.like } : person\n      );\n      // Update the isLiked state array based on the updated people array\n      const likedIds = updatedPeople.filter(person => person.like)\n      setIsLiked(likedIds);\n      setLikeButtonColor(prev => !prev)\n\n      return updatedPeople;\n    });\n  };\n\n  const removeFromFavorites = (id) => {\n    setPeople(prevPeople => (\n      prevPeople.map(person => (\n        person.id === id ? { ...person, like: !person.like } : person\n      ))\n    ))\n    setIsLiked(prev => prev.filter(item => item.id !== id)\n    )\n  }\n\n  const addToFolder = (folderId, personId) => {\n    const img = props.picture instanceof File ? URL.createObjectURL(props.picture) : props.picture;\n    const folderToUpdate = props.folders.find(folder => folder.id === folderId);\n\n    // Determine whether to add or remove the item from the folder\n    if (props.AddtofolderToggle) {\n      // Add the item to the folder\n      const updatedFolder = folderToUpdate ? {\n        ...folderToUpdate,\n        image: [...folderToUpdate.image, { id: personId, phone: props.phone, img: img }]\n      } : null;\n      const updatedFolders = props.folders.map(folder =>\n        folder.id === folderId ? updatedFolder : folder\n      );\n      props.setFolders(updatedFolders);\n    } else {\n      // Remove the item from the folder\n      const updatedFolders = props.folders.map(folder => ({\n        ...folder,\n        image: folder.image.filter(item => item.id !== personId)\n      }));\n      props.setFolders(updatedFolders);\n    }\n\n    // Toggle the button color\n    setButtonColor(!buttonColor)\n  };\n  console.log(people)\n\n  return (\n    <React.StrictMode>\n      <HashRouter>\n        <Routes>\n          <Route path=\"/\" element={<App people={people} setPeople={setPeople} isLiked={isLiked}\n            setIsLiked={setIsLiked} toggleLike={toggleLike} LikeButtonColor={LikeButtonColor}\n            setLikeButtonColor={setLikeButtonColor} folders={folders} setFolders={setFolders} addToFolder={addToFolder}\n          />} />\n\n          <Route path=\"/Lemmikud\" element={<Lemmikud people={people} setPeople={setPeople}\n            isLiked={isLiked} removeFromFavorites={removeFromFavorites} />} />\n\n          <Route path=\"/Folders\" element={<Folders people={people} setPeople={setPeople}\n            isLiked={isLiked} removeFromFavorites={removeFromFavorites} folders={folders} setFolders={setFolders}\n          />} />\n        </Routes>\n      </HashRouter>\n    </React.StrictMode>\n  );\n}\n\nReactDOM.render(\n  <AppWithPeople />,\n  document.getElementById('root')\n);\n\nreportWebVitals()"],"mappings":";;AACA,OAAOA,QAAQ,MAAM,WAAW;AAChC,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,UAAU,QAAQ,kBAAkB;AACrF,OAAO,sCAAsC;AAC7C,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGhC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAACF,MAAM,CAAC;EAC5C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMc,UAAU,GAAIC,EAAE,IAAK;IACzBR,SAAS,CAACS,UAAU,IAAI;MACtB,MAAMC,aAAa,GAAGD,UAAU,CAACE,GAAG,CAACC,MAAM,IACzCA,MAAM,CAACJ,EAAE,KAAKA,EAAE,GAAG;QAAE,GAAGI,MAAM;QAAEC,IAAI,EAAE,CAACD,MAAM,CAACC;MAAK,CAAC,GAAGD,MACzD,CAAC;MACD;MACA,MAAME,QAAQ,GAAGJ,aAAa,CAACK,MAAM,CAACH,MAAM,IAAIA,MAAM,CAACC,IAAI,CAAC;MAC5DX,UAAU,CAACY,QAAQ,CAAC;MACpBV,kBAAkB,CAACY,IAAI,IAAI,CAACA,IAAI,CAAC;MAEjC,OAAON,aAAa;IACtB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMO,mBAAmB,GAAIT,EAAE,IAAK;IAClCR,SAAS,CAACS,UAAU,IAClBA,UAAU,CAACE,GAAG,CAACC,MAAM,IACnBA,MAAM,CAACJ,EAAE,KAAKA,EAAE,GAAG;MAAE,GAAGI,MAAM;MAAEC,IAAI,EAAE,CAACD,MAAM,CAACC;IAAK,CAAC,GAAGD,MACxD,CACF,CAAC;IACFV,UAAU,CAACc,IAAI,IAAIA,IAAI,CAACD,MAAM,CAACG,IAAI,IAAIA,IAAI,CAACV,EAAE,KAAKA,EAAE,CACrD,CAAC;EACH,CAAC;EAED,MAAMW,WAAW,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC1C,MAAMC,GAAG,GAAGC,KAAK,CAACC,OAAO,YAAYC,IAAI,GAAGC,GAAG,CAACC,eAAe,CAACJ,KAAK,CAACC,OAAO,CAAC,GAAGD,KAAK,CAACC,OAAO;IAC9F,MAAMI,cAAc,GAAGL,KAAK,CAAClB,OAAO,CAACwB,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACtB,EAAE,KAAKY,QAAQ,CAAC;;IAE3E;IACA,IAAIG,KAAK,CAACQ,iBAAiB,EAAE;MAC3B;MACA,MAAMC,aAAa,GAAGJ,cAAc,GAAG;QACrC,GAAGA,cAAc;QACjBK,KAAK,EAAE,CAAC,GAAGL,cAAc,CAACK,KAAK,EAAE;UAAEzB,EAAE,EAAEa,QAAQ;UAAEa,KAAK,EAAEX,KAAK,CAACW,KAAK;UAAEZ,GAAG,EAAEA;QAAI,CAAC;MACjF,CAAC,GAAG,IAAI;MACR,MAAMa,cAAc,GAAGZ,KAAK,CAAClB,OAAO,CAACM,GAAG,CAACmB,MAAM,IAC7CA,MAAM,CAACtB,EAAE,KAAKY,QAAQ,GAAGY,aAAa,GAAGF,MAC3C,CAAC;MACDP,KAAK,CAACjB,UAAU,CAAC6B,cAAc,CAAC;IAClC,CAAC,MAAM;MACL;MACA,MAAMA,cAAc,GAAGZ,KAAK,CAAClB,OAAO,CAACM,GAAG,CAACmB,MAAM,KAAK;QAClD,GAAGA,MAAM;QACTG,KAAK,EAAEH,MAAM,CAACG,KAAK,CAAClB,MAAM,CAACG,IAAI,IAAIA,IAAI,CAACV,EAAE,KAAKa,QAAQ;MACzD,CAAC,CAAC,CAAC;MACHE,KAAK,CAACjB,UAAU,CAAC6B,cAAc,CAAC;IAClC;;IAEA;IACAC,cAAc,CAAC,CAACC,WAAW,CAAC;EAC9B,CAAC;EACDC,OAAO,CAACC,GAAG,CAACxC,MAAM,CAAC;EAEnB,oBACEH,OAAA,CAACJ,KAAK,CAACgD,UAAU;IAAAC,QAAA,eACf7C,OAAA,CAACT,UAAU;MAAAsD,QAAA,eACT7C,OAAA,CAACX,MAAM;QAAAwD,QAAA,gBACL7C,OAAA,CAACV,KAAK;UAACwD,IAAI,EAAC,GAAG;UAACC,OAAO,eAAE/C,OAAA,CAACR,GAAG;YAACW,MAAM,EAAEA,MAAO;YAACC,SAAS,EAAEA,SAAU;YAACC,OAAO,EAAEA,OAAQ;YACnFC,UAAU,EAAEA,UAAW;YAACK,UAAU,EAAEA,UAAW;YAACJ,eAAe,EAAEA,eAAgB;YACjFC,kBAAkB,EAAEA,kBAAmB;YAACC,OAAO,EAAEA,OAAQ;YAACC,UAAU,EAAEA,UAAW;YAACa,WAAW,EAAEA;UAAY;YAAAyB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5G;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAENnD,OAAA,CAACV,KAAK;UAACwD,IAAI,EAAC,WAAW;UAACC,OAAO,eAAE/C,OAAA,CAACP,QAAQ;YAACU,MAAM,EAAEA,MAAO;YAACC,SAAS,EAAEA,SAAU;YAC9EC,OAAO,EAAEA,OAAQ;YAACgB,mBAAmB,EAAEA;UAAoB;YAAA2B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAEpEnD,OAAA,CAACV,KAAK;UAACwD,IAAI,EAAC,UAAU;UAACC,OAAO,eAAE/C,OAAA,CAACF,OAAO;YAACK,MAAM,EAAEA,MAAO;YAACC,SAAS,EAAEA,SAAU;YAC5EC,OAAO,EAAEA,OAAQ;YAACgB,mBAAmB,EAAEA,mBAAoB;YAACZ,OAAO,EAAEA,OAAQ;YAACC,UAAU,EAAEA;UAAW;YAAAsC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtG;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEvB,CAAC;AAAAjD,EAAA,CA9EKD,aAAa;AAAAmD,EAAA,GAAbnD,aAAa;AAgFnBf,QAAQ,CAACmE,MAAM,eACbrD,OAAA,CAACC,aAAa;EAAA+C,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC,EACjBG,QAAQ,CAACC,cAAc,CAAC,MAAM,CAChC,CAAC;AAED7D,eAAe,CAAC,CAAC;AAAA,IAAA0D,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}