{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\bobzirolluuesti\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport People from \"./People\"; // impordin andmes sisse komponendist People, salvestan state väärktuseks [people]\nimport PeopleComponent from './componenst/PeopleComponent';\nimport Form from './componenst/form';\nimport Button from 'react-bootstrap/Button';\nimport { BrowserRouter as Router, Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [people, setPeople] = React.useState(People);\n  const addItem = newItem => {\n    // teen argumentidega funktsiooni et lisada uus item array se people!\n    setPeople(prevPeople => [...prevPeople, newItem]); // kasutan spread operaatorit  uued itemi lismiseks\n  };\n  const addEdited = (id, newData) => {\n    const newArray = people.map(person =>\n    // funktsioon  mis kasutab sisendeid id ja newData itereerib people array d. \n    person.id === id ? {\n      ...newData\n    } : person // funktsioon käib läbi people array ja kui tuvastab sama id mis on sisendis siis selle Itemi kirjutab \n    ); //üle uue data ga. Uueks dataks saab  komponendis EdidModali formi täitmiselt tekkiv info(või ehk.  data)\n    setPeople(newArray); // kuna map() tagastab meile uue array, siis peame people State muutma uueks arrayks. (people array\n  }; // on pea array, mida kuvatakse \n\n  const Delete = id => {\n    console.log(id);\n    setPeople(people.filter(person => person.id !== id));\n  };\n  //KUTSTUTAB ITEMI ARRAYST \n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: \"Kodu\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/lemmikud\",\n              children: \"Lemmikud\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 41,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: people &&\n        /*#__PURE__*/\n        //  people && tähendab  conditional render, kui state muutuja omab sisu ehkt on (true), \n        _jsxDEV(\"div\", {\n          className: \"row\",\n          children: [\"                         \", people.map((person, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-4\",\n            children: [\"   \", /*#__PURE__*/_jsxDEV(PeopleComponent, {\n              picture: person.picture,\n              phone: person.phone,\n              education: person.education,\n              name: person.name,\n              id: person.id,\n              addEdited: addEdited,\n              Delete: Delete\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        addItem: addItem /*     kuvame komponendi <Form /> , anname kaas props. muutujana funktsiooni addItem(). mida kirjeldasin üleval*/\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), \"                                        \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"z8RML1W+QUUxnzTIWEuvxHbcLP8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","People","PeopleComponent","Form","Button","BrowserRouter","Router","Link","jsxDEV","_jsxDEV","App","_s","isModalOpen","setIsModalOpen","people","setPeople","addItem","newItem","prevPeople","addEdited","id","newData","newArray","map","person","Delete","console","log","filter","children","className","to","fileName","_jsxFileName","lineNumber","columnNumber","index","picture","phone","education","name","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/Desktop/bobzirolluuesti/src/App.js"],"sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport People from \"./People\";                      // impordin andmes sisse komponendist People, salvestan state väärktuseks [people]\nimport PeopleComponent from './componenst/PeopleComponent';\nimport Form from './componenst/form';\nimport Button from 'react-bootstrap/Button';\nimport { BrowserRouter as Router, Link } from 'react-router-dom';\n\n\nfunction App() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const [people, setPeople] = React.useState(People)\n\n  const addItem = (newItem) => {                      // teen argumentidega funktsiooni et lisada uus item array se people!\n    setPeople(prevPeople => [...prevPeople, newItem]);// kasutan spread operaatorit  uued itemi lismiseks\n  };\n\n  const addEdited = (id, newData) => {\n    const newArray = people.map(person =>             // funktsioon  mis kasutab sisendeid id ja newData itereerib people array d. \n      person.id === id ? { ...newData } : person      // funktsioon käib läbi people array ja kui tuvastab sama id mis on sisendis siis selle Itemi kirjutab \n    );                                                 //üle uue data ga. Uueks dataks saab  komponendis EdidModali formi täitmiselt tekkiv info(või ehk.  data)\n    setPeople(newArray);                               // kuna map() tagastab meile uue array, siis peame people State muutma uueks arrayks. (people array\n  };                                                    // on pea array, mida kuvatakse \n\n  const Delete = (id) => {\n    console.log(id)\n    setPeople(people.filter(person => person.id !== id));\n  }\n  //KUTSTUTAB ITEMI ARRAYST \n  return (\n    <Router>\n      <div className=\"App\">\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Kodu</Link>\n            </li>\n            <li>\n              <Link to=\"/lemmikud\">Lemmikud</Link>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"container\">\n          {people && (                                    //  people && tähendab  conditional render, kui state muutuja omab sisu ehkt on (true), \n            <div className=\"row\">                         {/* arrayde puhul tähendb array liikmete olemas olu tagastust true, igal index kohal arrays. */}\n              {people.map((person, index) => (\n                <div className=\"col-md-4\" key={index}>   {/*   iterreerime üle people array ja igal kohal arrays  renderdame <PeopleComponendi />, millele anname kaasa \n                                                         //props muutujad, nt phone={person.phone}  */}\n                  <PeopleComponent\n                    picture={person.picture}\n                    phone={person.phone}\n                    education={person.education}\n                    name={person.name}\n                    id={person.id}\n                    addEdited={addEdited}\n                    Delete={Delete}\n\n\n                  />\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n        <Form\n          addItem={addItem}                      /*     kuvame komponendi <Form /> , anname kaas props. muutujana funktsiooni addItem(). mida kirjeldasin üleval*/\n        />                                        {/* ilmselt oleksin saanud kasutada ühte form komponenti nii <EditModal/> is kui ka <Form /> */}\n\n      </div>\n    </Router>\n  );\n\n}\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}